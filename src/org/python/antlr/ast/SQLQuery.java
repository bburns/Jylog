// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.AST;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.base.excepthandler;
import org.python.antlr.base.expr;
import org.python.antlr.base.mod;
import org.python.antlr.base.slice;
import org.python.antlr.base.stmt;
import org.python.core.ArgParser;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;

import java.sql.*;
import java.sql.DriverManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.tdb.*;
import com.hp.hpl.jena.rdf.model.*;

@ExposedType(name = "_ast.SQLQuery", base = AST.class)
//public class SQLQuery extends expr {
public class SQLQuery extends stmt {
public static final PyType TYPE = PyType.fromClass(SQLQuery.class);
    private expr dest;
    public expr getInternalDest() {
        return dest;
    }
    @ExposedGet(name = "dest")
    public PyObject getDest() {
        return dest;
    }
    @ExposedSet(name = "dest")
    public void setDest(PyObject dest) {
        this.dest = AstAdapters.py2expr(dest);
    }

    private java.util.List<expr> values;
    public java.util.List<expr> getInternalValues() {
        return values;
    }
    @ExposedGet(name = "values")
    public PyObject getValues() {
        return new AstList(values, AstAdapters.exprAdapter);
    }
    @ExposedSet(name = "values")
    public void setValues(PyObject values) {
        this.values = AstAdapters.py2exprList(values);
    }

    private Boolean nl;
    public Boolean getInternalNl() {
        return nl;
    }
    @ExposedGet(name = "nl")
    public PyObject getNl() {
        if (nl) return Py.True;
        return Py.False;
    }
    @ExposedSet(name = "nl")
    public void setNl(PyObject nl) {
        this.nl = AstAdapters.py2bool(nl);
    }


    private final static PyString[] fields =
    new PyString[] {new PyString("dest"), new PyString("values"), new PyString("nl")};
    @ExposedGet(name = "_fields")
    public PyString[] get_fields() { return fields; }

    private final static PyString[] attributes =
    new PyString[] {new PyString("lineno"), new PyString("col_offset")};
    @ExposedGet(name = "_attributes")
    public PyString[] get_attributes() { return attributes; }

    public SQLQuery(PyType subType) {
        super(subType);
    }
    public SQLQuery() {
        this(TYPE);
    }
    @ExposedNew
    @ExposedMethod
    public void SQLQuery___init__(PyObject[] args, String[] keywords) {
        ArgParser ap = new ArgParser("SQLQuery", args, keywords, new String[]
            {"dest", "values", "nl", "lineno", "col_offset"}, 3, true);
        setDest(ap.getPyObject(0, Py.None));
        setValues(ap.getPyObject(1, Py.None));
        setNl(ap.getPyObject(2, Py.None));
        int lin = ap.getInt(3, -1);
        if (lin != -1) {
            setLineno(lin);
        }

        int col = ap.getInt(4, -1);
        if (col != -1) {
            setLineno(col);
        }

    }

    private Queue<java.util.List> qattrs = new LinkedList<java.util.List>();
    private Queue<java.util.List> qfroms = new LinkedList<java.util.List>();
    private Queue<java.util.List> qlhs = new LinkedList<java.util.List>();
    private Queue<java.util.List> qlops = new LinkedList<java.util.List>();
    private Queue<java.util.List> qops = new LinkedList<java.util.List>();
    
    public static Map<String,SQLQuery>  SQLQueries = new HashMap<String, SQLQuery>();
    
    public SQLQuery(int dummy, Token token, java.util.List<String> attrs,
                    java.util.List<String> froms, java.util.List<String> lhs,
                    java.util.List<String> lops, java.util.List<String> ops,
                    java.util.List<expr> values) {
        super(token);
        SQLQueries.put(this.toString(), this);
        qattrs.add(attrs);
        qfroms.add(froms);
        qlhs.add(lhs);
        qlops.add(lops);
        qops.add(ops);
        this.values = values;
        if (values == null) {
            this.values = new ArrayList<expr>();
        }
        for (PythonTree t : this.values) {
            addChild(t);
        }
    }
    
    public static void sqlGetQueryProcessor(java.util.List<PyObject> where, String node_name) {
        SQLQueries.get(node_name).sqlProcessQuery(where);
        // SQLQueries.remove(node_name);
    }

    public void sqlProcessQuery(java.util.List<PyObject> where) {
        String sprql ="PREFIX pf:<http://emp/property/> SELECT ";
        // Check that Project attributes are in the schema.
        
        // Be sure that when froms.remove() is added, that froms.add() is also added.

        java.util.List a = qattrs.remove();
        qattrs.add(a);
        String s = "WHERE { ";
        for (int i = 0; i < a.size(); i++) {
            String attr = a.get(i).toString();
            if (attr.equals("*")) {
                // Can't do a proper job here until schema is implemented.
                sprql += "?empno ?ename ?sal ?deptno WHERE { ?x pf:empno ?empno . ?x pf:ename ?ename . " +
                     "?x pf:sal ?sal . ?x pf:deptno ?deptno . ";
                s = "";
            }
            else {
                sprql += "?" + attr + " ";
                s += "?x pf:" + attr + " ?" + attr + " . ";
            }
        }
        sprql += s;

        // Restore model
        // String directory = "C:\\GitJython\\TDB Data";
        String directory = "tdb";

        Model model = TDBFactory.createModel(directory);
        java.util.List l = qlhs.remove();
        qlhs.add(l);
        java.util.List o = qops.remove();
        qops.add(o);
        java.util.List c = qlops.remove();
        qlops.add(c);
        for (int i = 0; i < l.size(); i++) {
            sprql += "?x pf:" + l.get(i) + " \"" + where.get(i) + "\"";
            if (i >= 0 && i < (l.size() - 1) && c.get(i).equals("OR")) {
                // sprql += " } UNION { ";   // UNION for OR doesn't seem to work
                sprql += " . ";
            }
            else
                sprql += " . ";
        }
        sprql += " }";
        System.out.println("SQLQuery, sprql: " + sprql);
        Query query = QueryFactory.create(sprql);
        QueryExecution qe3 = QueryExecutionFactory.create(query, model);
        com.hp.hpl.jena.query.ResultSet results3 = qe3.execSelect();
        ResultSetFormatter.out(System.out, results3, query);
        qe3.close();
        model.close();
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("SQLQuery(");
        sb.append("dest=");
        sb.append(dumpThis(dest));
        sb.append(",");
        sb.append("values=");
        sb.append(dumpThis(values));
        sb.append(",");
        sb.append("nl=");
        sb.append(dumpThis(nl));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitSQLQuery(this);
    }

    public void traverse(VisitorIF<?> visitor) throws Exception {
        if (dest != null)
            dest.accept(visitor);
        if (values != null) {
            for (PythonTree t : values) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;
    @ExposedGet(name = "lineno")
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    @ExposedSet(name = "lineno")
    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    @ExposedGet(name = "col_offset")
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    @ExposedSet(name = "col_offset")
    public void setCol_offset(int num) {
        col_offset = num;
    }

}
