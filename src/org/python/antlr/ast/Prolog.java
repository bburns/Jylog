// adapted from SQLInsert.java


// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.AST;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.base.excepthandler;
import org.python.antlr.base.expr;
import org.python.antlr.base.mod;
import org.python.antlr.base.slice;
import org.python.antlr.base.stmt;
import org.python.core.ArgParser;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyList;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;

//import java.sql.*;
//import java.sql.DriverManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Random;
import java.util.ListIterator;


// Jena/TDB (triple-store database)
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.tdb.*;
import com.hp.hpl.jena.rdf.model.*;

// Prolog engine
import yprolog.*;


@ExposedType(name = "_ast.SQLInsert", base = AST.class)
public class Prolog extends stmt {
public static final PyType TYPE = PyType.fromClass(Prolog.class);
    private expr dest;
    public expr getInternalDest() {
        return dest;
    }
    @ExposedGet(name = "dest")
    public PyObject getDest() {
        return dest;
    }
    @ExposedSet(name = "dest")
    public void setDest(PyObject dest) {
        this.dest = AstAdapters.py2expr(dest);
    }

    private java.util.List<expr> values;
    public java.util.List<expr> getInternalValues() {
        return values;
    }
    @ExposedGet(name = "values")
    public PyObject getValues() {
        return new AstList(values, AstAdapters.exprAdapter);
    }
    @ExposedSet(name = "values")
    public void setValues(PyObject values) {
        this.values = AstAdapters.py2exprList(values);
    }

    private Boolean nl;
    public Boolean getInternalNl() {
        return nl;
    }
    @ExposedGet(name = "nl")
    public PyObject getNl() {
        if (nl) return Py.True;
        return Py.False;
    }
    @ExposedSet(name = "nl")
    public void setNl(PyObject nl) {
        this.nl = AstAdapters.py2bool(nl);
    }


    private final static PyString[] fields =
    new PyString[] {new PyString("dest"), new PyString("values"), new PyString("nl")};
    @ExposedGet(name = "_fields")
    public PyString[] get_fields() { return fields; }

    private final static PyString[] attributes =
    new PyString[] {new PyString("lineno"), new PyString("col_offset")};
    @ExposedGet(name = "_attributes")
    public PyString[] get_attributes() { return attributes; }

    public Prolog(PyType subType) {
        super(subType);
    }
    public Prolog() {
        this(TYPE);
    }
    @ExposedNew
    @ExposedMethod
    public void Prolog___init__(PyObject[] args, String[] keywords) {
        ArgParser ap = new ArgParser("Prolog", args, keywords, new String[]
            {"dest", "values", "nl", "lineno", "col_offset"}, 3, true);
        setDest(ap.getPyObject(0, Py.None));
        setValues(ap.getPyObject(1, Py.None));
        setNl(ap.getPyObject(2, Py.None));
        int lin = ap.getInt(3, -1);
        if (lin != -1) {
            setLineno(lin);
        }

        int col = ap.getInt(4, -1);
        if (col != -1) {
            setLineno(col);
        }

    }

    // The prolog engine - used by PrologQuery.java also
    public static YProlog yprolog = new YProlog();
    
    private java.util.List<String> predicateNames;
    private java.util.List<Integer> predicateCounts;
    
    public static Map<String,Prolog>  Prologs = new HashMap<String, Prolog>();

    
    // public static Integer entnum = new Integer(1);

    
    
    public Prolog(int dummy, Token token, java.util.List<String> predicateNames, java.util.List<Integer> counts, java.util.List<expr> arguments) {
        super(token);
        Prologs.put(this.toString(), this);
        
        this.predicateNames = predicateNames;
        this.predicateCounts = counts;
        this.values = arguments;
        if (arguments == null) {
            this.values = new ArrayList<expr>(); 
        }
        for (PythonTree t : this.values) {
            addChild(t);
        }
    }    
    
    public static void prologGetInsertProcessor(java.util.List<PyObject> exprs, String node_name) {
        //System.out.println("prologGetInsertProcessor");
        Prologs.get(node_name).prologProcessInsert(exprs);
    }

    public void prologProcessInsert(java.util.List<PyObject> exprs) {
        
        //System.out.printf("prologProcessInsert(%s)\n", exprs);
        
        // build the prolog clause to pass to the prolog engine
        StringBuilder sb = new StringBuilder();
        if (predicateNames.size() > 1){
          String sepF = "";
          for(int i = 0;i < predicateNames.size();i++){
            sb.append(sepF).append(predicateNames.get(i));
            if (predicateCounts.size() > 0 && predicateCounts.get(i) > 0){
              sb.append("(");
              String sep = "";
              for(int j = 0; j < predicateCounts.get(i); j++){
                PyObject po = exprs.remove(0);
                sb.append(sep).append(po);
                sep = ", ";
              }
              sb.append(")");
            }
            if(i == 0){
              sb.append(":-");
            }
            if(i == 1){
              sepF = ", ";
            }
          }
          sb.append(".");
          String clause = sb.toString();
          // add the clause to the prolog engine
        	//System.out.printf("call prolog with %s\n", clause);
          Prolog.yprolog.consult(clause);
        }else{
        	//We know that we have expressions lets check if they are lists
        	//Also make sure they are all of the same length else throw error
        	int currentLength = 0;
          boolean lengthSet = false;
        	if (!exprs.isEmpty()) {
            //This loops checks to make sure all lists in the fact are the same length
            for (PyObject po : exprs) {
              if (po.getType().getName().equals("list")){
                if (!lengthSet){
                  currentLength = po.__len__();
                  lengthSet = true;
                }
                if (currentLength != po.__len__()){
                	throw Py.TypeError("When using multiple lists within a fact they must be the same length!");
                }
              }
            }
        	}
        	if (lengthSet){
        		//Build the key that is in the format of a fact
   					//Inserting %NUM% where an element of the list goes
        		StringBuilder keyBuilder = new StringBuilder();
        		keyBuilder.append(predicateNames.get(0));
        		keyBuilder.append("(");
        		int listNumber = 0;
        		String sep = "";
        		ArrayList<Object[]> temp = new ArrayList<Object[]>();
        		for (PyObject po : exprs) {
              if (po.getType().getName().equals("list")){
                keyBuilder.append(sep).append("%" + listNumber + "%");
                listNumber++;
                temp.add(((PyList)po).toArray());
              }else{
              	keyBuilder.append(sep).append(po);
              }
              sep = ", ";
            }
            keyBuilder.append(")");
            keyBuilder.append(".");
            
            //Loop through and replace the %NUM% and add to prolog
            String key = keyBuilder.toString();
            ArrayList<String> facts = new ArrayList<String>();
            for(int i = 0; i < currentLength; i++){
            	String tempKey = key;
            	for(int j = 0; j < temp.size(); j++){
            		tempKey = tempKey.replace("%" + j + "%", (temp.get(j)[i]).toString());
            	}
            	//add each fact to the prolog database
        			//System.out.printf("call prolog with %s\n", tempKey);
            	Prolog.yprolog.consult(tempKey);
            }
        	}else{
        		sb.append(predicateNames.get(0));
		        if (!exprs.isEmpty()) {
	            sb.append("(");
	            String sep = "";
	            for (PyObject po : exprs) {
                sb.append(sep).append(po);
                sep = ", ";
	            }
	            sb.append(")");
        		}
        		sb.append(".");
		        String clause = sb.toString();
		        // add the clause to the prolog engine
        		//System.out.printf("call prolog with %s\n", clause);
		        Prolog.yprolog.consult(clause);
          }
        }

        // print the contents of the db
        //System.out.println(Prolog.yprolog.dump());

        
        // add binary predicates to triple store also
        if (exprs.size() == 2) {
            boolean isList = exprs.get(0).getType().getName().equals("list");            
            if (!isList) {
                String predicateName = this.predicateNames.get(0);
                String value1 = exprs.get(0).toString();
                String value2 = exprs.get(1).toString();            
                
                System.out.printf("Adding binary predicate to triple store: %s, %s, %s.\n", value1, predicateName, value2);
                
                // Directory of store
                // String directory = "C:\\GitJython\\TDB Data";
                String directory = "tdb";
                
                // Make or restore TDB-backed Jena model in the named directory.
                Model model = TDBFactory.createModel(directory);
                model.close();

                // uri prefixes
                // String objectUri = "http://object/";
                // String propertyUri = "http://property/";
                // stick with these for now for sql query code
                String objectUri = "http://employee/";
                String propertyUri = "http://emp/property/";
                
                // build the resource
                Resource r = model.createResource(objectUri + value1);
                Property p = model.createProperty(propertyUri + predicateName);
                r.addProperty(p, value2);
                
                // synchronize to the model and close
                TDB.sync(model);
                model.close();
            }
        }
    }
    
    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Prolog(");
        sb.append("dest=");
        sb.append(dumpThis(dest));
        sb.append(",");
        sb.append("values=");
        sb.append(dumpThis(values));
        sb.append(",");
        sb.append("nl=");
        sb.append(dumpThis(nl));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitProlog(this);
    }

    public void traverse(VisitorIF<?> visitor) throws Exception {
        if (dest != null)
            dest.accept(visitor);
        if (values != null) {
            for (PythonTree t : values) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;
    @ExposedGet(name = "lineno")
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    @ExposedSet(name = "lineno")
    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    @ExposedGet(name = "col_offset")
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    @ExposedSet(name = "col_offset")
    public void setCol_offset(int num) {
        col_offset = num;
    }

}
